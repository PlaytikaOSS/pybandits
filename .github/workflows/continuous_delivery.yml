name: CD

on:
  push:
    branches:
      - main

jobs:
  check_version_and_publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8, 3.9 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.poetry/bin:$PATH"
      - name: Install project dependencies with Poetry
        run: |
          poetry install
      - name: Style check
        run: |
          # run pre-commit hooks
          poetry run pre-commit run --all-files
      - name: Run tests
        run: |
          poetry run pytest -vv -k 'not time and not update_parallel'
      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=v$(poetry version -s)
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Verify if version has changed
        id: version_check
        run: |
          if [ $(git tag -l ${{ env.PACKAGE_VERSION }}") ]; then
            echo "Version ${{ env.PACKAGE_VERSION }} already exists."
            exit 0
          fi
      - name: Build and publish to pypi
        if: ${{ success() && matrix.python-version == 3.8 }}
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --build
      - name: Create a Git tag
        if: ${{ success() && matrix.python-version == 3.8 }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git tag "${{ env.PACKAGE_VERSION }}"
          git push origin "${{ env.PACKAGE_VERSION }}"
      - name: Publish Draft Release
        if: ${{ success() && matrix.python-version == 3.8 }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-version: ${{ env.PACKAGE_VERSION }}
          script: |
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draftRelease = releases.find(r => r.draft && r.name === 'Draft');

            if (draftRelease) {
              await github.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draftRelease.id,
                tag_name: package-version,
                name: package-version,
                draft: false
              });
            } else {
              core.setFailed(`Draft release named "Draft" not found.`);
            };
